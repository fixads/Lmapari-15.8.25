---
const { t } = Astro.props;
---

<div class="bg-white rounded-lg shadow-md p-6" data-aos="fade-up" data-aos-delay="100">
  <h2 class="text-2xl font-bold text-primary mb-6">{t.contact.sendMessage}</h2>
  
  <!-- Success Message -->
  <div id="success-message" class="hidden mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
    <i class="fas fa-check-circle mr-2"></i>
    <span id="success-text">Message sent successfully!</span>
  </div>
  
  <!-- Error Message -->
  <div id="error-message" class="hidden mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
    <i class="fas fa-exclamation-circle mr-2"></i>
    <span id="error-text">Failed to send message. Please try again.</span>
  </div>
  
  <form id="contact-form" class="space-y-4">
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">{t.contact.name}</label>
      <input
        type="text"
        id="name"
        name="from_name"
        class="w-full px-4 py-2 border rounded-lg focus:ring-primary focus:border-primary"
        required
      />
    </div>
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">{t.contact.email}</label>
      <input
        type="email"
        id="email"
        name="from_email"
        class="w-full px-4 py-2 border rounded-lg focus:ring-primary focus:border-primary"
        required
      />
    </div>
    <div>
      <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">{t.contact.subject}</label>
      <input
        type="text"
        id="subject"
        name="subject"
        class="w-full px-4 py-2 border rounded-lg focus:ring-primary focus:border-primary"
        required
      />
    </div>
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">{t.contact.message}</label>
      <textarea
        id="message"
        name="message"
        rows="4"
        class="w-full px-4 py-2 border rounded-lg focus:ring-primary focus:border-primary"
        required
      ></textarea>
    </div>
    
    <!-- Honeypot field - hidden from users but visible to bots -->
    <div style="position: absolute; left: -9999px; opacity: 0; pointer-events: none;">
      <label for="website">Website (leave blank):</label>
      <input type="text" id="website" name="website" tabindex="-1" autocomplete="off" />
    </div>
    
    <button
      type="submit"
      id="submit-btn"
      class="w-full bg-primary text-white py-2 px-4 rounded-lg hover:bg-primary/90 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span id="submit-text">{t.contact.sendBtn}</span>
      <i id="loading-spinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
    </button>
  </form>
</div>

<script is:inline>
  window.addEventListener('load', function() {
    // Initialize EmailJS
    emailjs.init('715HPvd6oLEO5grl1');

    // Rate limiting - prevent multiple submissions
    let lastSubmissionTime = 0;
    const RATE_LIMIT_MS = 30000; // 30 seconds between submissions

    // Get form elements
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const successText = document.getElementById('success-text');
    const errorText = document.getElementById('error-text');

    // Success/Error messages by language
    const messages = {
      en: {
        success: 'Message sent successfully! We will get back to you soon.',
        error: 'Failed to send message. Please try again or contact us directly.',
        sending: 'Sending...',
        rateLimited: 'Please wait before sending another message.',
        botDetected: 'Spam detected. Please try again.'
      },
      de: {
        success: 'Nachricht erfolgreich gesendet! Wir werden uns bald bei Ihnen melden.',
        error: 'Nachricht konnte nicht gesendet werden. Bitte versuchen Sie es erneut.',
        sending: 'Wird gesendet...',
        rateLimited: 'Bitte warten Sie, bevor Sie eine weitere Nachricht senden.',
        botDetected: 'Spam erkannt. Bitte versuchen Sie es erneut.'
      },
      fr: {
        success: 'Message envoyé avec succès! Nous vous répondrons bientôt.',
        error: 'Échec de l\'envoi du message. Veuillez réessayer.',
        sending: 'Envoi en cours...',
        rateLimited: 'Veuillez attendre avant d\'envoyer un autre message.',
        botDetected: 'Spam détecté. Veuillez réessayer.'
      },
      he: {
        success: 'ההודעה נשלחה בהצלחה! נחזור אליכם בקרוב.',
        error: 'שליחת ההודעה נכשלה. אנא נסו שוב או צרו קשר ישירות.',
        sending: 'שולח...',
        rateLimited: 'אנא המתינו לפני שליחת הודעה נוספת.',
        botDetected: 'זוהה ספאם. אנא נסו שוב.'
      }
    };

    // Detect current language from URL
    const currentLang = window.location.pathname.includes('/de/') ? 'de' :
                       window.location.pathname.includes('/fr/') ? 'fr' :
                       window.location.pathname.includes('/he/') ? 'he' : 'en';

    const currentMessages = messages[currentLang];

    // Handle form submission
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Check honeypot field (bot protection)
        const honeypot = document.getElementById('website');
        if (honeypot && honeypot.value.trim() !== '') {
          // Bot detected - honeypot field was filled
          errorText.textContent = currentMessages.botDetected;
          errorMessage.classList.remove('hidden');
          return;
        }
        
        // Rate limiting check
        const currentTime = Date.now();
        if (currentTime - lastSubmissionTime < RATE_LIMIT_MS) {
          errorText.textContent = currentMessages.rateLimited;
          errorMessage.classList.remove('hidden');
          return;
        }
        
        // Show loading state
        submitBtn.disabled = true;
        submitText.textContent = currentMessages.sending;
        loadingSpinner.classList.remove('hidden');
        
        // Hide previous messages
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');

        // Send email using EmailJS
        emailjs.sendForm('mishel', 'template_zzf90hp', form)
          .then(function(response) {
            console.log('SUCCESS!', response.status, response.text);
            
            // Update last submission time
            lastSubmissionTime = currentTime;
            
            // Show success message
            successText.textContent = currentMessages.success;
            successMessage.classList.remove('hidden');
            
            // Reset form
            form.reset();
            
            // Scroll to success message
            successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
          }, function(error) {
            console.log('FAILED...', error);
            
            // Show error message
            errorText.textContent = currentMessages.error;
            errorMessage.classList.remove('hidden');
            
            // Scroll to error message
            errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
          })
          .finally(function() {
            // Reset button state
            submitBtn.disabled = false;
            submitText.textContent = document.querySelector('button[type="submit"] span').textContent;
            loadingSpinner.classList.add('hidden');
          });
      });
    }
  });
</script>

<style>
  .text-primary {
    color: #C5A572;
  }
  
  input:focus, textarea:focus {
    border-color: #C5A572;
    box-shadow: 0 0 0 3px rgba(197, 165, 114, 0.1);
  }
</style>